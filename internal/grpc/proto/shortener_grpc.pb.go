// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/shortener.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortenerClient is the client API for Shortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerClient interface {
	Ping(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*PingResponse, error)
	GetStats(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*StatsResponse, error)
	GetByShortURL(ctx context.Context, in *ShortURLRequest, opts ...grpc.CallOption) (*URLResponse, error)
	SaveURLFromText(ctx context.Context, in *URLRequest, opts ...grpc.CallOption) (*URLFromTextResponse, error)
	SaveBatch(ctx context.Context, in *BatchSaveRequest, opts ...grpc.CallOption) (*BatchSaveResponse, error)
	GetUsersURLs(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*UserURLsResponse, error)
	DelBatch(ctx context.Context, in *DelBatchRequest, opts ...grpc.CallOption) (*DelBatchResponse, error)
}

type shortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerClient(cc grpc.ClientConnInterface) ShortenerClient {
	return &shortenerClient{cc}
}

func (c *shortenerClient) Ping(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/shortener.Shortener/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetStats(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, "/shortener.Shortener/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetByShortURL(ctx context.Context, in *ShortURLRequest, opts ...grpc.CallOption) (*URLResponse, error) {
	out := new(URLResponse)
	err := c.cc.Invoke(ctx, "/shortener.Shortener/GetByShortURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) SaveURLFromText(ctx context.Context, in *URLRequest, opts ...grpc.CallOption) (*URLFromTextResponse, error) {
	out := new(URLFromTextResponse)
	err := c.cc.Invoke(ctx, "/shortener.Shortener/SaveURLFromText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) SaveBatch(ctx context.Context, in *BatchSaveRequest, opts ...grpc.CallOption) (*BatchSaveResponse, error) {
	out := new(BatchSaveResponse)
	err := c.cc.Invoke(ctx, "/shortener.Shortener/SaveBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetUsersURLs(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*UserURLsResponse, error) {
	out := new(UserURLsResponse)
	err := c.cc.Invoke(ctx, "/shortener.Shortener/GetUsersURLs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) DelBatch(ctx context.Context, in *DelBatchRequest, opts ...grpc.CallOption) (*DelBatchResponse, error) {
	out := new(DelBatchResponse)
	err := c.cc.Invoke(ctx, "/shortener.Shortener/DelBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServer is the server API for Shortener service.
// All implementations must embed UnimplementedShortenerServer
// for forward compatibility
type ShortenerServer interface {
	Ping(context.Context, *EmptyRequest) (*PingResponse, error)
	GetStats(context.Context, *EmptyRequest) (*StatsResponse, error)
	GetByShortURL(context.Context, *ShortURLRequest) (*URLResponse, error)
	SaveURLFromText(context.Context, *URLRequest) (*URLFromTextResponse, error)
	SaveBatch(context.Context, *BatchSaveRequest) (*BatchSaveResponse, error)
	GetUsersURLs(context.Context, *EmptyRequest) (*UserURLsResponse, error)
	DelBatch(context.Context, *DelBatchRequest) (*DelBatchResponse, error)
	mustEmbedUnimplementedShortenerServer()
}

// UnimplementedShortenerServer must be embedded to have forward compatible implementations.
type UnimplementedShortenerServer struct {
}

func (UnimplementedShortenerServer) Ping(context.Context, *EmptyRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedShortenerServer) GetStats(context.Context, *EmptyRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedShortenerServer) GetByShortURL(context.Context, *ShortURLRequest) (*URLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByShortURL not implemented")
}
func (UnimplementedShortenerServer) SaveURLFromText(context.Context, *URLRequest) (*URLFromTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveURLFromText not implemented")
}
func (UnimplementedShortenerServer) SaveBatch(context.Context, *BatchSaveRequest) (*BatchSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBatch not implemented")
}
func (UnimplementedShortenerServer) GetUsersURLs(context.Context, *EmptyRequest) (*UserURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersURLs not implemented")
}
func (UnimplementedShortenerServer) DelBatch(context.Context, *DelBatchRequest) (*DelBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBatch not implemented")
}
func (UnimplementedShortenerServer) mustEmbedUnimplementedShortenerServer() {}

// UnsafeShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServer will
// result in compilation errors.
type UnsafeShortenerServer interface {
	mustEmbedUnimplementedShortenerServer()
}

func RegisterShortenerServer(s grpc.ServiceRegistrar, srv ShortenerServer) {
	s.RegisterService(&Shortener_ServiceDesc, srv)
}

func _Shortener_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.Shortener/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).Ping(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.Shortener/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetStats(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetByShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetByShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.Shortener/GetByShortURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetByShortURL(ctx, req.(*ShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_SaveURLFromText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).SaveURLFromText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.Shortener/SaveURLFromText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).SaveURLFromText(ctx, req.(*URLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_SaveBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).SaveBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.Shortener/SaveBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).SaveBatch(ctx, req.(*BatchSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetUsersURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetUsersURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.Shortener/GetUsersURLs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetUsersURLs(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_DelBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).DelBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.Shortener/DelBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).DelBatch(ctx, req.(*DelBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shortener_ServiceDesc is the grpc.ServiceDesc for Shortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortener.Shortener",
	HandlerType: (*ShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Shortener_Ping_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Shortener_GetStats_Handler,
		},
		{
			MethodName: "GetByShortURL",
			Handler:    _Shortener_GetByShortURL_Handler,
		},
		{
			MethodName: "SaveURLFromText",
			Handler:    _Shortener_SaveURLFromText_Handler,
		},
		{
			MethodName: "SaveBatch",
			Handler:    _Shortener_SaveBatch_Handler,
		},
		{
			MethodName: "GetUsersURLs",
			Handler:    _Shortener_GetUsersURLs_Handler,
		},
		{
			MethodName: "DelBatch",
			Handler:    _Shortener_DelBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shortener.proto",
}
